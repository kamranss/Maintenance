import axios from "axios";

export const endPoint = "https://localhost:7066/";

let authToken = localStorage.getItem("token")
  ? localStorage.getItem("token")
  : null;

export const api = axios.create({
  baseURL: endPoint + "api",
  headers: {
    Authorization: `Bearer ${authToken}`,
  },
});

api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("token");
    if (token) {
      config.headers["Authorization"] = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

let isRefreshing = false;
let refreshSubscribers = [];

api.interceptors.response.use(
  (response) => response,
  async (error) => {
    if (error.response && error.response.status === 401) {
      const originalRequest = error.config;

      if (!isRefreshing) {
        isRefreshing = true;
        try {
          const response = await api.post("auth/refresh");
          const newToken = response.data.authorisation.token;
          localStorage.setItem("token", newToken);
          error.config.headers["Authorization"] = `Bearer ${newToken}`;
          refreshSubscribers.forEach((subscriber) => subscriber(newToken));
          refreshSubscribers = [];
          return api(originalRequest);
        } catch (err) {
          console.log(err);
        } finally {
          isRefreshing = false;
        }
      } else {
        return new Promise((resolve) => {
          refreshSubscribers.push((token) => {
            originalRequest.headers["Authorization"] = `Bearer ${token}`;
            resolve(api(originalRequest));
          });
        });
      }
    }
    return Promise.reject(error);
  }
);

export function auth() {
  return axios.create({
    baseURL: endPoint + "api",
    headers: {
      "Content-Type": "application/json",
    },
  });
}
